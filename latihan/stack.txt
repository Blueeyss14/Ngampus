constanta IDMAX : integer <- 15
type infotype   : character
type stack      : < info    : array[1..IDMAX] of integer 
                    Top     : integer >

procedure createStack(S: stack)
Kamus:
Algoritma:
    Top(S) <- 0
endprocedure

function isEmpty(S: stack) -> boolean
Kamus:
Algoritma:
    if (Top(S) == 0) then
        return true
    else
        return false
    endif
endfunction

function isFull(S: stack) -> boolean
Kamus:
Algoritma:
    if (Top(S) == IDMAX) then
        return true
    else
        return false
    endif
endfunction

procedure push(S: stack, X infotype)
Kamus:
Algoritma:
    if (isFull(S) == false) then
        Top(S) <- Top(S) + 1
        info(S)[Top(S)] <- X
    endif
endprocedure

function pop(S: stack) -> infotype
Kamus:
    x: infotype
Algoritma:
    x <- info(S)[Top(S)]
    Top(S) <- Top(S) - 1
    return x
endpfunction

procedure printInfo(S: stack)
Kamus:
    i: integer
Algoritma:
    for (i <- Top(S) downTo 1) do
        output(info(S)[i])
    endif
endprocedure