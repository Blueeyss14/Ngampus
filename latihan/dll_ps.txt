type Data       : <data1, data2 : integer>
type infotype   : Data
type address    : pointer to elmlist
type elmlist    : < info    : infotype 
                    next    : address 
                    prev    : address >
type List       : < first,  : address 
                    last    : address >

function create_Elmlist(data: infotype) -> address
Kamus:
    P: address
Algoritma:
    P <- new elmlist
    info(P) <- data
    next(P) <- NULL
    prev(P) <- NULLS
    return P
endfunction

procedure insert_first(in/out L: List, in P: address)
Kamus:
Algoritma:
    if (first(L) == NULL) then
        first(L) <- P
        last(L) <- P
        next(P) <- NULL
        prev(P) <- NULL
    else
        next(P) <- first(L)
        prev(first(L)) <- P
        first(L) <- P
    endif
endprocedure

procedure insert_last(in/out L: List, in P: address)
Kamus
Algoritma:
    if (first(L) == NULL) then
        first(L) <- P
        last(L) <- P
        next(P) <- NULL
        prev(P) <- NULL
    else
        next(last(L)) <- P
        prev(P) <- last
        last <- P
    endif
endprocedure

insert insert_after(in/out L: List, in Q, P: address)
Kamus:
Algoritma:
    if (Q != NULL) then
        next(P) <- next(Q)
        prev(P) <- Q

        if (next(Q) != NULL) then
            prev(next(Q)) <- P
        else
            last(L) <- P
        endif
    else
        next(Q) <- P
    endif
endprocedure

procedure delete_first(in/out L: List, in P: address)
Kamus:
Algoritma:
    P <- first(L)
    first(L) <- NULL
    prev(first(L)) <- NULL

endprocedure

procedure delete_last(in/out L: List, in P: address)
Kamus:
Algoritma:
    P <- last(L)
    last(L) <- prev(P)
    next(last(L)) <- NULL
    prev(P) <- NULL 
endprocedure

procedure delete_after(in/out Q: address)
Kamus:
    P: address
Algoritma:
    P <- next(Q)
    next(Q) <- next(P)
    next(P) <- NULL
    prev(P) <- NULL
endprocedure

