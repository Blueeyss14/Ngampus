type Data       : < data1, data2 : string>
type infotype   : Data
type address    : pointer to elmlist
type elmlist    : < info    : infotype 
                    next    : address
                    prev    : address >
type List       : < first   : address 
                    last    : address >


function create_Elmlist(data: infotype) -> address
Kamus:
    P: address
Algoritma:
    P <- new elmlist
    info(P) <- data
    next(P) <- NULL
    prev(P) <- NULL
    return P
endpfunction

procedure insert_last(in/out L: List: in P: address)
Kamus:
Algoritma:
    next(last) <- p
    prev(P) <- last
    last <- P
endprocedure

function findData(in/out L: List, data1: string) -> address
Kamus:
    P: address
Algoritma:
    P <- first(L)
    while (P != NULL) do
        if (info(P).data1 == data1) then
            return P
        endif
        p <- next(P)
    endwhile

    return P
endfunction

procedure delete_first(in/out L: List)
Kamus:
    P: address
Algoritma:
    P <- first(L)
    first(L) <- NULL
    prev(first(L)) <- NULL
endprocedure

procedure delete_last(L: List)
Kamus:
    P: address
Algoritma:
    P <- last(L)
    last(L) <- prev(P)
    next(last(L)) <- NULL
    prev(P) <- NULL
endprocedure

procedure delete_after(in/out, Q: address)
Kamus:
    P: address
Algoritma:
    P <- next(Q)
    next(Q) <- next(P)
    prev(next(p)) <- P
    next(P) <- NULL
    prev(P) <- NULL

endprocedure 

procedure deleteData(in/out L: List, data1: string)
Kamus:
    P: address
Algoritma:
    P <- findData(L, data1)
    if (P != NULL) then
        if (P == first(L) AND first(L) == last(L)) then
            first(L) <- NULL
            last(L) <- NULL
        else if (P == first(L) AND first(L) != last(L)) then
            delete_first(L)
        else
            delete_last(L)
        endif
    else
        output("List Kosong")
    endif
endprocedure
