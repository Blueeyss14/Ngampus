type Data       : < data1, data2 : string>
type infotype   : Data
type address    : pointer to elmlist
type elmlist    : < info    : infotype 
                    next    : address
                    prev    : address >
type List       : < first   : address 
                    last    : address >


function create_Elmlist(data: infotype) -> address
Kamus:
    P: address
Algoritma:
    P <- new elmlist
    next(P) <- NULL
    prev(P) <- NULL
    return P
endpfunction

procedure insert_last(in/out L: List: in P: address)
Kamus:
Algoritma:
    next(last) <- p
    prev(P) <- last
    last <- P
endprocedure

function findData(in/out L: List, data1: string) -> address
Kamus:
    P: address
Algoritma:
    P <- first(L)
    while (P != NULL) do
        if (info(P).data1 == data1) then
            return P
        endif
        p <- next(P)
    endwhile

    return P
endfuntion